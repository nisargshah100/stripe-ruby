= Stripe Ruby bindings

== Installation

You don't need this source code unless you want to modify the gem. If
you just want to use the Stripe Ruby bindings, you should run:

  sudo gem install --source https://code.stripe.com stripe

If you want to build the gem from source:

  sudo gem build stripe.gemspec

== Requirements

* Ruby 1.8.7 or above. (Ruby 1.8.6 may work if you load
  ActiveSupport.)
* rest-client, json

== Mirrors

The stripe gem is mirrored on Rubygems, so you should be able to
install it via

  gem install stripe

if desired. We recommend using the https://code.stripe.com mirror so
all code is fetched over SSL.

== Setup

To start working with stripe, setup your api key. 

  require "stripe"
  Stripe.api_key = "vtUQeOtUnYr7PGCLQ96Ul4zqpDUO4sOE"

The stripe key can be retrieved from your stripe account. 
Login -> Your Account -> Account Settings -> API Keys 

Test keys are used for development purposes. In a production environment,
use the live keys. 

There are two kinds of keys. The Secret Key should never be shared with 
anyone and should reside in a secure place (don't commit to git, etc). The
publishable key is stored in javascript.

== How it Works

Stripe works by first sending the credit card information to stripe server. 
Once the server recieves and validates the information, it returns a card token.
The card token can be used to make charges to the user's account. The credit
card information is maintained by stripe so you don't need to worry about it.

== Sample Form

  <form action="" method="POST" id="payment-form">
    <div>
      <label>Card Number</label>
      <input type="text" size="20" autocomplete="off" class="card-number"/>
    </div>
    <div>
      <label>CVC</label>
      <input type="text" size="4" autocomplete="off" class="card-cvc"/>
    </div>
    <div>
      <label>Expiration (MM/YYYY)</label>
      <input type="text" size="2" class="card-expiry-month"/>
      <span> / </span>
      <input type="text" size="4" class="card-expiry-year"/>
    </div>
    <button type="submit" class="submit-button">Submit Payment</button>
  </form>

== Submitting the form

The form needs to submitted to stripe servers. Add the following javascript file
  
  <script type="text/javascript" src="https://js.stripe.com/v1/"></script>
  <script type="text/javascript">
    Stripe.setPublishableKey('YOUR_PUBLISHABLE_KEY');
  </script>

Now, the Stripe namespace will be available to javascript. 

  Stripe.createToken({
      number: $('.card-number').val(),
      cvc: $('.card-cvc').val(),
      exp_month: $('.card-expiry-month').val(),
      exp_year: $('.card-expiry-year').val()
  }, stripeResponseHandler);

createToken will return a token if the credit card information is valid. The token
can be used to charge. 

== First Charge

  # token from stripe server 
  token = params[:stripeToken]

  charge = Stripe::Charge.create(
    :amount => 1000, # amount in cents, again
    :currency => "usd",
    :card => token,
    :description => "payinguser@example.com"
  )

In order to charge later, a customer must be created.

  # token from stripe server 
  token = params[:stripeToken]

  customer = Stripe::Customer.create(
    :card => token,
    :description => "payinguser@example.com"
  )

The customer can be stored, and can be charged later

  Stripe::Charge.create(
    :amount => 1000, # in cents
    :currency => "usd",
    :customer => customer.id
  )

The customers can also be retrieved and deleted
  
  customers = Stripe::Customer.all
  customers[0].delete

== Subscription

In order to create a subscription, you need to first create a plan. The plan allow
for repetitive billing. 

  Stripe::Plan.create(
    :amount => 2000,                    # in cents
    :interval => 'month',               # month / year 
    :name => 'Amazing Gold Plan',       # displayed on invoices
    :currency => 'usd',                 # 3-letter ISO code
    :id => 'gold'                       # unqiue id for each plan
  )

In order to charge to a plan, a customer needs to be created & stored. 

  customer = Stripe::Customer.create(
    :card => token,
    :description => "payinguser@example.com"
    :plan => 'gold'                               # unique id of the plan
  )

# TODO: Add plan to current customer
#       Trial Subscription
#       Webhooks

